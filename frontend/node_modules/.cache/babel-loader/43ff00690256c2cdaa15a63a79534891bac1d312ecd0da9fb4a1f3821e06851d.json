{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? '/api' : 'http://localhost:8080/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  // 可以在这里添加token等认证信息\n  return config;\n}, error => {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('响应错误:', error);\n  let message = '网络错误';\n  if (error.response) {\n    switch (error.response.status) {\n      case 400:\n        message = '请求参数错误';\n        break;\n      case 401:\n        message = '未授权访问';\n        break;\n      case 403:\n        message = '禁止访问';\n        break;\n      case 404:\n        message = '请求的资源不存在';\n        break;\n      case 500:\n        message = '服务器内部错误';\n        break;\n      default:\n        message = `请求失败: ${error.response.status}`;\n    }\n  } else if (error.request) {\n    message = '网络连接失败';\n  }\n  ElMessage.error(message);\n  return Promise.reject(error);\n});\n\n// 敏感词相关API\nexport const sensitiveWordApi = {\n  // 获取所有启用的敏感词\n  getAllEnabled: () => api.get('/sensitive-words/enabled'),\n  // 分页查询敏感词\n  getByPage: (page, size) => api.get('/sensitive-words/page', {\n    params: {\n      page,\n      size\n    }\n  }),\n  // 根据ID获取敏感词\n  getById: id => api.get(`/sensitive-words/${id}`),\n  // 添加敏感词\n  add: word => api.post('/sensitive-words', word),\n  // 更新敏感词\n  update: (id, word) => api.put(`/sensitive-words/${id}`, word),\n  // 删除敏感词\n  delete: id => api.delete(`/sensitive-words/${id}`),\n  // 批量添加敏感词\n  batchAdd: words => api.post('/sensitive-words/batch', words),\n  // 根据分类获取敏感词\n  getByCategory: category => api.get(`/sensitive-words/category/${category}`),\n  // 根据级别获取敏感词\n  getByLevel: level => api.get(`/sensitive-words/level/${level}`),\n  // 重新加载敏感词字典\n  reloadDictionary: () => api.post('/sensitive-words/reload')\n};\n\n// 过滤相关API\nexport const filterApi = {\n  // 过滤文本\n  filterText: text => api.post('/filter/text', {\n    text\n  }),\n  // 检测文本\n  checkText: text => api.post('/filter/check', {\n    text\n  }),\n  // 分页查询过滤记录\n  getRecords: (page, size) => api.get('/filter/records', {\n    params: {\n      page,\n      size\n    }\n  }),\n  // 根据IP地址查询过滤记录\n  getRecordsByIp: ipAddress => api.get(`/filter/records/ip/${ipAddress}`),\n  // 根据时间范围查询过滤记录\n  getRecordsByTimeRange: (startTime, endTime) => api.get('/filter/records/time', {\n    params: {\n      startTime,\n      endTime\n    }\n  }),\n  // 清理历史记录\n  cleanHistoryRecords: beforeTime => api.delete('/filter/records/clean', {\n    params: {\n      beforeTime\n    }\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","ElMessage","api","create","baseURL","process","env","NODE_ENV","timeout","headers","interceptors","request","use","config","error","console","Promise","reject","response","message","status","sensitiveWordApi","getAllEnabled","get","getByPage","page","size","params","getById","id","add","word","post","update","put","delete","batchAdd","words","getByCategory","category","getByLevel","level","reloadDictionary","filterApi","filterText","text","checkText","getRecords","getRecordsByIp","ipAddress","getRecordsByTimeRange","startTime","endTime","cleanHistoryRecords","beforeTime"],"sources":["D:/code/sensitive-word-filter-system/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios'\nimport { ElMessage } from 'element-plus'\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? '/api' : 'http://localhost:8080/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\n// 请求拦截器\napi.interceptors.request.use(\n  config => {\n    // 可以在这里添加token等认证信息\n    return config\n  },\n  error => {\n    console.error('请求错误:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\napi.interceptors.response.use(\n  response => {\n    return response\n  },\n  error => {\n    console.error('响应错误:', error)\n    \n    let message = '网络错误'\n    if (error.response) {\n      switch (error.response.status) {\n        case 400:\n          message = '请求参数错误'\n          break\n        case 401:\n          message = '未授权访问'\n          break\n        case 403:\n          message = '禁止访问'\n          break\n        case 404:\n          message = '请求的资源不存在'\n          break\n        case 500:\n          message = '服务器内部错误'\n          break\n        default:\n          message = `请求失败: ${error.response.status}`\n      }\n    } else if (error.request) {\n      message = '网络连接失败'\n    }\n    \n    ElMessage.error(message)\n    return Promise.reject(error)\n  }\n)\n\n// 敏感词相关API\nexport const sensitiveWordApi = {\n  // 获取所有启用的敏感词\n  getAllEnabled: () => api.get('/sensitive-words/enabled'),\n  \n  // 分页查询敏感词\n  getByPage: (page, size) => api.get('/sensitive-words/page', { params: { page, size } }),\n  \n  // 根据ID获取敏感词\n  getById: (id) => api.get(`/sensitive-words/${id}`),\n  \n  // 添加敏感词\n  add: (word) => api.post('/sensitive-words', word),\n  \n  // 更新敏感词\n  update: (id, word) => api.put(`/sensitive-words/${id}`, word),\n  \n  // 删除敏感词\n  delete: (id) => api.delete(`/sensitive-words/${id}`),\n  \n  // 批量添加敏感词\n  batchAdd: (words) => api.post('/sensitive-words/batch', words),\n  \n  // 根据分类获取敏感词\n  getByCategory: (category) => api.get(`/sensitive-words/category/${category}`),\n  \n  // 根据级别获取敏感词\n  getByLevel: (level) => api.get(`/sensitive-words/level/${level}`),\n  \n  // 重新加载敏感词字典\n  reloadDictionary: () => api.post('/sensitive-words/reload')\n}\n\n// 过滤相关API\nexport const filterApi = {\n  // 过滤文本\n  filterText: (text) => api.post('/filter/text', { text }),\n  \n  // 检测文本\n  checkText: (text) => api.post('/filter/check', { text }),\n  \n  // 分页查询过滤记录\n  getRecords: (page, size) => api.get('/filter/records', { params: { page, size } }),\n  \n  // 根据IP地址查询过滤记录\n  getRecordsByIp: (ipAddress) => api.get(`/filter/records/ip/${ipAddress}`),\n  \n  // 根据时间范围查询过滤记录\n  getRecordsByTimeRange: (startTime, endTime) => api.get('/filter/records/time', { \n    params: { startTime, endTime } \n  }),\n  \n  // 清理历史记录\n  cleanHistoryRecords: (beforeTime) => api.delete('/filter/records/clean', { \n    params: { beforeTime } \n  })\n}\n\nexport default api "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}