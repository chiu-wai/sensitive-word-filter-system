{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport { filterApi, sensitiveWordApi } from '../utils/api';\nexport default {\n  name: 'Home',\n  setup() {\n    const store = useStore();\n    const loading = ref(false);\n    const quickFilterText = ref('');\n    const filterResult = ref(null);\n    const statistics = ref({});\n    const recentRecords = ref([]);\n\n    // 快速过滤\n    const handleQuickFilter = async () => {\n      if (!quickFilterText.value.trim()) {\n        ElMessage.warning('请输入要过滤的文本');\n        return;\n      }\n      loading.value = true;\n      try {\n        const response = await filterApi.filterText(quickFilterText.value);\n        if (response.code === 200) {\n          filterResult.value = response.data;\n          ElMessage.success('过滤完成');\n        } else {\n          ElMessage.error(response.message || '过滤失败');\n        }\n      } catch (error) {\n        ElMessage.error('过滤失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 快速检测\n    const handleQuickCheck = async () => {\n      if (!quickFilterText.value.trim()) {\n        ElMessage.warning('请输入要检测的文本');\n        return;\n      }\n      loading.value = true;\n      try {\n        const response = await filterApi.checkText(quickFilterText.value);\n        if (response.code === 200) {\n          const data = response.data;\n          filterResult.value = {\n            originalText: quickFilterText.value,\n            filteredText: quickFilterText.value,\n            sensitiveWords: data.sensitiveWords,\n            filterTime: 0\n          };\n          ElMessage.success('检测完成');\n        } else {\n          ElMessage.error(response.message || '检测失败');\n        }\n      } catch (error) {\n        ElMessage.error('检测失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 格式化时间\n    const formatTime = time => {\n      if (!time) return '';\n      return new Date(time).toLocaleString();\n    };\n\n    // 加载数据\n    const loadData = async () => {\n      loading.value = true;\n      try {\n        // 加载最近记录\n        const recordsResponse = await filterApi.getRecords(1, 5);\n        if (recordsResponse.data.code === 200) {\n          recentRecords.value = recordsResponse.data.data.list;\n        }\n        // 获取敏感词总数\n        const countResponse = await sensitiveWordApi.getAllEnabled();\n        let wordCount = 0;\n        if (countResponse.data.code === 200) {\n          wordCount = countResponse.data.data.length;\n        }\n        statistics.value = {\n          sensitiveWordCount: wordCount,\n          filterCount: 1250,\n          // 可根据实际接口补充\n          todayFilterCount: 45,\n          // 可根据实际接口补充\n          avgFilterTime: 12 // 可根据实际接口补充\n        };\n      } catch (error) {\n        console.error('加载数据失败:', error);\n      } finally {\n        loading.value = false;\n      }\n    };\n    onMounted(() => {\n      loadData();\n      window.addEventListener('refresh-statistics', loadData);\n    });\n    return {\n      loading,\n      quickFilterText,\n      filterResult,\n      statistics,\n      recentRecords,\n      handleQuickFilter,\n      handleQuickCheck,\n      formatTime\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","useStore","ElMessage","filterApi","sensitiveWordApi","name","setup","store","loading","quickFilterText","filterResult","statistics","recentRecords","handleQuickFilter","value","trim","warning","response","filterText","code","data","success","error","message","handleQuickCheck","checkText","originalText","filteredText","sensitiveWords","filterTime","formatTime","time","Date","toLocaleString","loadData","recordsResponse","getRecords","list","countResponse","getAllEnabled","wordCount","length","sensitiveWordCount","filterCount","todayFilterCount","avgFilterTime","console","window","addEventListener"],"sources":["D:\\code\\sensitive-word-filter-system\\frontend\\src\\views\\Home.vue"],"sourcesContent":["<template>\r\n  <div class=\"home\">\r\n    <el-row :gutter=\"20\">\r\n      <!-- 系统概览卡片 -->\r\n      <el-col :span=\"24\">\r\n        <el-card class=\"overview-card\" shadow=\"hover\">\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <el-icon><DataBoard /></el-icon>\r\n              <span>系统概览</span>\r\n            </div>\r\n          </template>\r\n          <el-row :gutter=\"20\">\r\n            <el-col :span=\"6\">\r\n              <div class=\"stat-item\">\r\n                <div class=\"stat-number\">{{ statistics.sensitiveWordCount || 0 }}</div>\r\n                <div class=\"stat-label\">敏感词总数</div>\r\n              </div>\r\n            </el-col>\r\n            <el-col :span=\"6\">\r\n              <div class=\"stat-item\">\r\n                <div class=\"stat-number\">{{ statistics.filterCount || 0 }}</div>\r\n                <div class=\"stat-label\">过滤次数</div>\r\n              </div>\r\n            </el-col>\r\n            <el-col :span=\"6\">\r\n              <div class=\"stat-item\">\r\n                <div class=\"stat-number\">{{ statistics.todayFilterCount || 0 }}</div>\r\n                <div class=\"stat-label\">今日过滤</div>\r\n              </div>\r\n            </el-col>\r\n            <el-col :span=\"6\">\r\n              <div class=\"stat-item\">\r\n                <div class=\"stat-number\">{{ statistics.avgFilterTime || 0 }}ms</div>\r\n                <div class=\"stat-label\">平均过滤时间</div>\r\n              </div>\r\n            </el-col>\r\n          </el-row>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <el-row :gutter=\"20\" style=\"margin-top: 20px;\">\r\n      <!-- 快速过滤 -->\r\n      <el-col :span=\"12\">\r\n        <el-card class=\"quick-filter-card\" shadow=\"hover\">\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <el-icon><Filter /></el-icon>\r\n              <span>快速过滤</span>\r\n            </div>\r\n          </template>\r\n          <el-form @submit.prevent=\"handleQuickFilter\">\r\n            <el-form-item>\r\n              <el-input\r\n                v-model=\"quickFilterText\"\r\n                type=\"textarea\"\r\n                :rows=\"6\"\r\n                placeholder=\"请输入要过滤的文本内容...\"\r\n                :disabled=\"loading\"\r\n              />\r\n            </el-form-item>\r\n            <el-form-item>\r\n              <el-button type=\"primary\" @click=\"handleQuickFilter\" :loading=\"loading\">\r\n                <el-icon><Filter /></el-icon>\r\n                开始过滤\r\n              </el-button>\r\n              <el-button @click=\"handleQuickCheck\" :loading=\"loading\">\r\n                <el-icon><Search /></el-icon>\r\n                仅检测\r\n              </el-button>\r\n            </el-form-item>\r\n          </el-form>\r\n          \r\n          <!-- 过滤结果 -->\r\n          <div v-if=\"filterResult\" class=\"filter-result\">\r\n            <el-divider content-position=\"left\">过滤结果</el-divider>\r\n            <div class=\"result-item\">\r\n              <strong>原始文本：</strong>\r\n              <div class=\"text-content\">{{ filterResult.originalText }}</div>\r\n            </div>\r\n            <div class=\"result-item\">\r\n              <strong>过滤后文本：</strong>\r\n              <div class=\"text-content filtered\">{{ filterResult.filteredText }}</div>\r\n            </div>\r\n            <div class=\"result-item\">\r\n              <strong>检测到的敏感词：</strong>\r\n              <el-tag \r\n                v-for=\"word in filterResult.sensitiveWords\" \r\n                :key=\"word\" \r\n                type=\"danger\" \r\n                style=\"margin-right: 5px;\"\r\n              >\r\n                {{ word }}\r\n              </el-tag>\r\n              <span v-if=\"filterResult.sensitiveWords.length === 0\" style=\"color: #67c23a;\">\r\n                未检测到敏感词\r\n              </span>\r\n            </div>\r\n            <div class=\"result-item\">\r\n              <strong>过滤时间：</strong>\r\n              <span>{{ filterResult.filterTime }}ms</span>\r\n            </div>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n\r\n      <!-- 系统功能 -->\r\n      <el-col :span=\"12\">\r\n        <el-card class=\"features-card\" shadow=\"hover\">\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <el-icon><Grid /></el-icon>\r\n              <span>系统功能</span>\r\n            </div>\r\n          </template>\r\n          <div class=\"features-grid\">\r\n            <div class=\"feature-item\" @click=\"$router.push('/filter')\">\r\n              <el-icon><Filter /></el-icon>\r\n              <h3>文本过滤</h3>\r\n              <p>实时过滤文本中的敏感词，支持批量处理</p>\r\n            </div>\r\n            <div class=\"feature-item\" @click=\"$router.push('/words')\">\r\n              <el-icon><Document /></el-icon>\r\n              <h3>敏感词管理</h3>\r\n              <p>添加、编辑、删除敏感词，支持分类管理</p>\r\n            </div>\r\n            <div class=\"feature-item\" @click=\"$router.push('/records')\">\r\n              <el-icon><List /></el-icon>\r\n              <h3>过滤记录</h3>\r\n              <p>查看历史过滤记录，支持按条件筛选</p>\r\n            </div>\r\n            <div class=\"feature-item\" @click=\"$router.push('/statistics')\">\r\n              <el-icon><TrendCharts /></el-icon>\r\n              <h3>统计分析</h3>\r\n              <p>查看过滤统计数据和趋势分析</p>\r\n            </div>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <el-row :gutter=\"20\" style=\"margin-top: 20px;\">\r\n      <!-- 最近过滤记录 -->\r\n      <el-col :span=\"24\">\r\n        <el-card class=\"recent-records-card\" shadow=\"hover\">\r\n          <template #header>\r\n            <div class=\"card-header\">\r\n              <el-icon><Clock /></el-icon>\r\n              <span>最近过滤记录</span>\r\n              <el-button \r\n                type=\"text\" \r\n                @click=\"$router.push('/records')\"\r\n                style=\"margin-left: auto;\"\r\n              >\r\n                查看更多\r\n              </el-button>\r\n            </div>\r\n          </template>\r\n          <el-table :data=\"recentRecords\" style=\"width: 100%\" v-loading=\"loading\">\r\n            <el-table-column prop=\"createTime\" label=\"时间\" width=\"180\">\r\n              <template #default=\"scope\">\r\n                {{ formatTime(scope.row.createTime) }}\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column prop=\"originalText\" label=\"原始文本\" show-overflow-tooltip />\r\n            <el-table-column prop=\"filteredText\" label=\"过滤后文本\" show-overflow-tooltip />\r\n            <el-table-column prop=\"filterCount\" label=\"敏感词数量\" width=\"100\" />\r\n            <el-table-column prop=\"ipAddress\" label=\"IP地址\" width=\"120\" />\r\n          </el-table>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { ElMessage } from 'element-plus'\r\nimport { filterApi, sensitiveWordApi } from '../utils/api'\r\n\r\nexport default {\r\n  name: 'Home',\r\n  setup() {\r\n    const store = useStore()\r\n    const loading = ref(false)\r\n    const quickFilterText = ref('')\r\n    const filterResult = ref(null)\r\n    const statistics = ref({})\r\n    const recentRecords = ref([])\r\n\r\n    // 快速过滤\r\n    const handleQuickFilter = async () => {\r\n      if (!quickFilterText.value.trim()) {\r\n        ElMessage.warning('请输入要过滤的文本')\r\n        return\r\n      }\r\n\r\n      loading.value = true\r\n      try {\r\n        const response = await filterApi.filterText(quickFilterText.value)\r\n        if (response.code === 200) {\r\n          filterResult.value = response.data\r\n          ElMessage.success('过滤完成')\r\n        } else {\r\n          ElMessage.error(response.message || '过滤失败')\r\n        }\r\n      } catch (error) {\r\n        ElMessage.error('过滤失败')\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n\r\n    // 快速检测\r\n    const handleQuickCheck = async () => {\r\n      if (!quickFilterText.value.trim()) {\r\n        ElMessage.warning('请输入要检测的文本')\r\n        return\r\n      }\r\n\r\n      loading.value = true\r\n      try {\r\n        const response = await filterApi.checkText(quickFilterText.value)\r\n        if (response.code === 200) {\r\n          const data = response.data\r\n          filterResult.value = {\r\n            originalText: quickFilterText.value,\r\n            filteredText: quickFilterText.value,\r\n            sensitiveWords: data.sensitiveWords,\r\n            filterTime: 0\r\n          }\r\n          ElMessage.success('检测完成')\r\n        } else {\r\n          ElMessage.error(response.message || '检测失败')\r\n        }\r\n      } catch (error) {\r\n        ElMessage.error('检测失败')\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n\r\n    // 格式化时间\r\n    const formatTime = (time) => {\r\n      if (!time) return ''\r\n      return new Date(time).toLocaleString()\r\n    }\r\n\r\n    // 加载数据\r\n    const loadData = async () => {\r\n      loading.value = true\r\n      try {\r\n        // 加载最近记录\r\n        const recordsResponse = await filterApi.getRecords(1, 5)\r\n        if (recordsResponse.data.code === 200) {\r\n          recentRecords.value = recordsResponse.data.data.list\r\n        }\r\n        // 获取敏感词总数\r\n        const countResponse = await sensitiveWordApi.getAllEnabled()\r\n        let wordCount = 0\r\n        if (countResponse.data.code === 200) {\r\n          wordCount = countResponse.data.data.length\r\n        }\r\n        statistics.value = {\r\n          sensitiveWordCount: wordCount,\r\n          filterCount: 1250, // 可根据实际接口补充\r\n          todayFilterCount: 45, // 可根据实际接口补充\r\n          avgFilterTime: 12 // 可根据实际接口补充\r\n        }\r\n      } catch (error) {\r\n        console.error('加载数据失败:', error)\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n\r\n    onMounted(() => {\r\n      loadData()\r\n      window.addEventListener('refresh-statistics', loadData)\r\n    })\r\n\r\n    return {\r\n      loading,\r\n      quickFilterText,\r\n      filterResult,\r\n      statistics,\r\n      recentRecords,\r\n      handleQuickFilter,\r\n      handleQuickCheck,\r\n      formatTime\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.home {\r\n  padding: 20px;\r\n}\r\n\r\n.overview-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n}\r\n\r\n.card-header .el-icon {\r\n  margin-right: 8px;\r\n  font-size: 18px;\r\n}\r\n\r\n.stat-item {\r\n  text-align: center;\r\n  padding: 20px;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  border-radius: 8px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.stat-number {\r\n  font-size: 32px;\r\n  font-weight: bold;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.stat-label {\r\n  font-size: 14px;\r\n  opacity: 0.9;\r\n}\r\n\r\n.quick-filter-card,\r\n.features-card,\r\n.recent-records-card {\r\n  height: 100%;\r\n}\r\n\r\n.filter-result {\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 6px;\r\n}\r\n\r\n.result-item {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.result-item strong {\r\n  display: inline-block;\r\n  width: 120px;\r\n  color: #606266;\r\n}\r\n\r\n.text-content {\r\n  margin-top: 5px;\r\n  padding: 10px;\r\n  background-color: white;\r\n  border: 1px solid #dcdfe6;\r\n  border-radius: 4px;\r\n  min-height: 60px;\r\n  word-break: break-all;\r\n}\r\n\r\n.text-content.filtered {\r\n  color: #e6a23c;\r\n  font-weight: bold;\r\n}\r\n\r\n.features-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  gap: 15px;\r\n}\r\n\r\n.feature-item {\r\n  padding: 20px;\r\n  text-align: center;\r\n  background-color: #f8f9fa;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.feature-item:hover {\r\n  background-color: #e3f2fd;\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.feature-item .el-icon {\r\n  font-size: 32px;\r\n  color: #409eff;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.feature-item h3 {\r\n  margin: 10px 0;\r\n  color: #303133;\r\n}\r\n\r\n.feature-item p {\r\n  color: #606266;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .features-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .stat-item {\r\n    margin-bottom: 15px;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}