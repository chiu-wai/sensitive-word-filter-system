{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport { filterApi, sensitiveWordApi } from '../utils/api';\nexport default {\n  name: 'Home',\n  setup() {\n    const store = useStore();\n    const loading = ref(false);\n    const quickFilterText = ref('');\n    const filterResult = ref(null);\n    const statistics = ref({});\n    const recentRecords = ref([]);\n\n    // 快速过滤\n    const handleQuickFilter = async () => {\n      if (!quickFilterText.value.trim()) {\n        ElMessage.warning('请输入要过滤的文本');\n        return;\n      }\n      loading.value = true;\n      try {\n        const response = await filterApi.filterText(quickFilterText.value);\n        if (response.data.code === 200) {\n          filterResult.value = response.data.data;\n          ElMessage.success('过滤完成');\n        } else {\n          ElMessage.error(response.data.message || '过滤失败');\n        }\n      } catch (error) {\n        ElMessage.error('过滤失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 快速检测\n    const handleQuickCheck = async () => {\n      if (!quickFilterText.value.trim()) {\n        ElMessage.warning('请输入要检测的文本');\n        return;\n      }\n      loading.value = true;\n      try {\n        const response = await filterApi.checkText(quickFilterText.value);\n        if (response.data.code === 200) {\n          const data = response.data.data;\n          filterResult.value = {\n            originalText: quickFilterText.value,\n            filteredText: quickFilterText.value,\n            sensitiveWords: data.sensitiveWords,\n            filterTime: 0\n          };\n          ElMessage.success('检测完成');\n        } else {\n          ElMessage.error(response.data.message || '检测失败');\n        }\n      } catch (error) {\n        ElMessage.error('检测失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 格式化时间\n    const formatTime = time => {\n      if (!time) return '';\n      return new Date(time).toLocaleString();\n    };\n\n    // 加载数据\n    const loadData = async () => {\n      loading.value = true;\n      try {\n        // 加载最近记录\n        const recordsResponse = await filterApi.getRecords(1, 5);\n        if (recordsResponse.data.code === 200) {\n          recentRecords.value = recordsResponse.data.data.list;\n        }\n        // 获取敏感词总数\n        const wordsResponse = await sensitiveWordApi.getByPage(1, 1);\n        let wordCount = 0;\n        if (wordsResponse.data.code === 200) {\n          wordCount = wordsResponse.data.data.total;\n        }\n        statistics.value = {\n          sensitiveWordCount: wordCount,\n          filterCount: 1250,\n          todayFilterCount: 45,\n          avgFilterTime: 12\n        };\n      } catch (error) {\n        console.error('加载数据失败:', error);\n      } finally {\n        loading.value = false;\n      }\n    };\n    onMounted(() => {\n      loadData();\n    });\n    return {\n      loading,\n      quickFilterText,\n      filterResult,\n      statistics,\n      recentRecords,\n      handleQuickFilter,\n      handleQuickCheck,\n      formatTime\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","useStore","ElMessage","filterApi","sensitiveWordApi","name","setup","store","loading","quickFilterText","filterResult","statistics","recentRecords","handleQuickFilter","value","trim","warning","response","filterText","data","code","success","error","message","handleQuickCheck","checkText","originalText","filteredText","sensitiveWords","filterTime","formatTime","time","Date","toLocaleString","loadData","recordsResponse","getRecords","list","wordsResponse","getByPage","wordCount","total","sensitiveWordCount","filterCount","todayFilterCount","avgFilterTime","console"],"sources":["D:\\code\\sensitive-word-filter-system\\frontend\\src\\views\\Home.vue"],"sourcesContent":["<template>\n  <div class=\"home\">\n    <el-row :gutter=\"20\">\n      <!-- 系统概览卡片 -->\n      <el-col :span=\"24\">\n        <el-card class=\"overview-card\" shadow=\"hover\">\n          <template #header>\n            <div class=\"card-header\">\n              <el-icon><DataBoard /></el-icon>\n              <span>系统概览</span>\n            </div>\n          </template>\n          <el-row :gutter=\"20\">\n            <el-col :span=\"6\">\n              <div class=\"stat-item\">\n                <div class=\"stat-number\">{{ statistics.sensitiveWordCount || 0 }}</div>\n                <div class=\"stat-label\">敏感词总数</div>\n              </div>\n            </el-col>\n            <el-col :span=\"6\">\n              <div class=\"stat-item\">\n                <div class=\"stat-number\">{{ statistics.filterCount || 0 }}</div>\n                <div class=\"stat-label\">过滤次数</div>\n              </div>\n            </el-col>\n            <el-col :span=\"6\">\n              <div class=\"stat-item\">\n                <div class=\"stat-number\">{{ statistics.todayFilterCount || 0 }}</div>\n                <div class=\"stat-label\">今日过滤</div>\n              </div>\n            </el-col>\n            <el-col :span=\"6\">\n              <div class=\"stat-item\">\n                <div class=\"stat-number\">{{ statistics.avgFilterTime || 0 }}ms</div>\n                <div class=\"stat-label\">平均过滤时间</div>\n              </div>\n            </el-col>\n          </el-row>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px;\">\n      <!-- 快速过滤 -->\n      <el-col :span=\"12\">\n        <el-card class=\"quick-filter-card\" shadow=\"hover\">\n          <template #header>\n            <div class=\"card-header\">\n              <el-icon><Filter /></el-icon>\n              <span>快速过滤</span>\n            </div>\n          </template>\n          <el-form @submit.prevent=\"handleQuickFilter\">\n            <el-form-item>\n              <el-input\n                v-model=\"quickFilterText\"\n                type=\"textarea\"\n                :rows=\"6\"\n                placeholder=\"请输入要过滤的文本内容...\"\n                :disabled=\"loading\"\n              />\n            </el-form-item>\n            <el-form-item>\n              <el-button type=\"primary\" @click=\"handleQuickFilter\" :loading=\"loading\">\n                <el-icon><Filter /></el-icon>\n                开始过滤\n              </el-button>\n              <el-button @click=\"handleQuickCheck\" :loading=\"loading\">\n                <el-icon><Search /></el-icon>\n                仅检测\n              </el-button>\n            </el-form-item>\n          </el-form>\n          \n          <!-- 过滤结果 -->\n          <div v-if=\"filterResult\" class=\"filter-result\">\n            <el-divider content-position=\"left\">过滤结果</el-divider>\n            <div class=\"result-item\">\n              <strong>原始文本：</strong>\n              <div class=\"text-content\">{{ filterResult.originalText }}</div>\n            </div>\n            <div class=\"result-item\">\n              <strong>过滤后文本：</strong>\n              <div class=\"text-content filtered\">{{ filterResult.filteredText }}</div>\n            </div>\n            <div class=\"result-item\">\n              <strong>检测到的敏感词：</strong>\n              <el-tag \n                v-for=\"word in filterResult.sensitiveWords\" \n                :key=\"word\" \n                type=\"danger\" \n                style=\"margin-right: 5px;\"\n              >\n                {{ word }}\n              </el-tag>\n              <span v-if=\"filterResult.sensitiveWords.length === 0\" style=\"color: #67c23a;\">\n                未检测到敏感词\n              </span>\n            </div>\n            <div class=\"result-item\">\n              <strong>过滤时间：</strong>\n              <span>{{ filterResult.filterTime }}ms</span>\n            </div>\n          </div>\n        </el-card>\n      </el-col>\n\n      <!-- 系统功能 -->\n      <el-col :span=\"12\">\n        <el-card class=\"features-card\" shadow=\"hover\">\n          <template #header>\n            <div class=\"card-header\">\n              <el-icon><Grid /></el-icon>\n              <span>系统功能</span>\n            </div>\n          </template>\n          <div class=\"features-grid\">\n            <div class=\"feature-item\" @click=\"$router.push('/filter')\">\n              <el-icon><Filter /></el-icon>\n              <h3>文本过滤</h3>\n              <p>实时过滤文本中的敏感词，支持批量处理</p>\n            </div>\n            <div class=\"feature-item\" @click=\"$router.push('/words')\">\n              <el-icon><Document /></el-icon>\n              <h3>敏感词管理</h3>\n              <p>添加、编辑、删除敏感词，支持分类管理</p>\n            </div>\n            <div class=\"feature-item\" @click=\"$router.push('/records')\">\n              <el-icon><List /></el-icon>\n              <h3>过滤记录</h3>\n              <p>查看历史过滤记录，支持按条件筛选</p>\n            </div>\n            <div class=\"feature-item\" @click=\"$router.push('/statistics')\">\n              <el-icon><TrendCharts /></el-icon>\n              <h3>统计分析</h3>\n              <p>查看过滤统计数据和趋势分析</p>\n            </div>\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <el-row :gutter=\"20\" style=\"margin-top: 20px;\">\n      <!-- 最近过滤记录 -->\n      <el-col :span=\"24\">\n        <el-card class=\"recent-records-card\" shadow=\"hover\">\n          <template #header>\n            <div class=\"card-header\">\n              <el-icon><Clock /></el-icon>\n              <span>最近过滤记录</span>\n              <el-button \n                type=\"text\" \n                @click=\"$router.push('/records')\"\n                style=\"margin-left: auto;\"\n              >\n                查看更多\n              </el-button>\n            </div>\n          </template>\n          <el-table :data=\"recentRecords\" style=\"width: 100%\" v-loading=\"loading\">\n            <el-table-column prop=\"createTime\" label=\"时间\" width=\"180\">\n              <template #default=\"scope\">\n                {{ formatTime(scope.row.createTime) }}\n              </template>\n            </el-table-column>\n            <el-table-column prop=\"originalText\" label=\"原始文本\" show-overflow-tooltip />\n            <el-table-column prop=\"filteredText\" label=\"过滤后文本\" show-overflow-tooltip />\n            <el-table-column prop=\"filterCount\" label=\"敏感词数量\" width=\"100\" />\n            <el-table-column prop=\"ipAddress\" label=\"IP地址\" width=\"120\" />\n          </el-table>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\nimport { useStore } from 'vuex'\nimport { ElMessage } from 'element-plus'\nimport { filterApi, sensitiveWordApi } from '../utils/api'\n\nexport default {\n  name: 'Home',\n  setup() {\n    const store = useStore()\n    const loading = ref(false)\n    const quickFilterText = ref('')\n    const filterResult = ref(null)\n    const statistics = ref({})\n    const recentRecords = ref([])\n\n    // 快速过滤\n    const handleQuickFilter = async () => {\n      if (!quickFilterText.value.trim()) {\n        ElMessage.warning('请输入要过滤的文本')\n        return\n      }\n\n      loading.value = true\n      try {\n        const response = await filterApi.filterText(quickFilterText.value)\n        if (response.data.code === 200) {\n          filterResult.value = response.data.data\n          ElMessage.success('过滤完成')\n        } else {\n          ElMessage.error(response.data.message || '过滤失败')\n        }\n      } catch (error) {\n        ElMessage.error('过滤失败')\n      } finally {\n        loading.value = false\n      }\n    }\n\n    // 快速检测\n    const handleQuickCheck = async () => {\n      if (!quickFilterText.value.trim()) {\n        ElMessage.warning('请输入要检测的文本')\n        return\n      }\n\n      loading.value = true\n      try {\n        const response = await filterApi.checkText(quickFilterText.value)\n        if (response.data.code === 200) {\n          const data = response.data.data\n          filterResult.value = {\n            originalText: quickFilterText.value,\n            filteredText: quickFilterText.value,\n            sensitiveWords: data.sensitiveWords,\n            filterTime: 0\n          }\n          ElMessage.success('检测完成')\n        } else {\n          ElMessage.error(response.data.message || '检测失败')\n        }\n      } catch (error) {\n        ElMessage.error('检测失败')\n      } finally {\n        loading.value = false\n      }\n    }\n\n    // 格式化时间\n    const formatTime = (time) => {\n      if (!time) return ''\n      return new Date(time).toLocaleString()\n    }\n\n    // 加载数据\n    const loadData = async () => {\n      loading.value = true\n      try {\n        // 加载最近记录\n        const recordsResponse = await filterApi.getRecords(1, 5)\n        if (recordsResponse.data.code === 200) {\n          recentRecords.value = recordsResponse.data.data.list\n        }\n        // 获取敏感词总数\n        const wordsResponse = await sensitiveWordApi.getByPage(1, 1)\n        let wordCount = 0\n        if (wordsResponse.data.code === 200) {\n          wordCount = wordsResponse.data.data.total\n        }\n        statistics.value = {\n          sensitiveWordCount: wordCount,\n          filterCount: 1250,\n          todayFilterCount: 45,\n          avgFilterTime: 12\n        }\n      } catch (error) {\n        console.error('加载数据失败:', error)\n      } finally {\n        loading.value = false\n      }\n    }\n\n    onMounted(() => {\n      loadData()\n    })\n\n    return {\n      loading,\n      quickFilterText,\n      filterResult,\n      statistics,\n      recentRecords,\n      handleQuickFilter,\n      handleQuickCheck,\n      formatTime\n    }\n  }\n}\n</script>\n\n<style scoped>\n.home {\n  padding: 20px;\n}\n\n.overview-card {\n  margin-bottom: 20px;\n}\n\n.card-header {\n  display: flex;\n  align-items: center;\n  font-size: 16px;\n  font-weight: bold;\n}\n\n.card-header .el-icon {\n  margin-right: 8px;\n  font-size: 18px;\n}\n\n.stat-item {\n  text-align: center;\n  padding: 20px;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  border-radius: 8px;\n  margin-bottom: 10px;\n}\n\n.stat-number {\n  font-size: 32px;\n  font-weight: bold;\n  margin-bottom: 8px;\n}\n\n.stat-label {\n  font-size: 14px;\n  opacity: 0.9;\n}\n\n.quick-filter-card,\n.features-card,\n.recent-records-card {\n  height: 100%;\n}\n\n.filter-result {\n  margin-top: 20px;\n  padding: 15px;\n  background-color: #f8f9fa;\n  border-radius: 6px;\n}\n\n.result-item {\n  margin-bottom: 10px;\n}\n\n.result-item strong {\n  display: inline-block;\n  width: 120px;\n  color: #606266;\n}\n\n.text-content {\n  margin-top: 5px;\n  padding: 10px;\n  background-color: white;\n  border: 1px solid #dcdfe6;\n  border-radius: 4px;\n  min-height: 60px;\n  word-break: break-all;\n}\n\n.text-content.filtered {\n  color: #e6a23c;\n  font-weight: bold;\n}\n\n.features-grid {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 15px;\n}\n\n.feature-item {\n  padding: 20px;\n  text-align: center;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.feature-item:hover {\n  background-color: #e3f2fd;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.feature-item .el-icon {\n  font-size: 32px;\n  color: #409eff;\n  margin-bottom: 10px;\n}\n\n.feature-item h3 {\n  margin: 10px 0;\n  color: #303133;\n}\n\n.feature-item p {\n  color: #606266;\n  font-size: 14px;\n  line-height: 1.5;\n}\n\n@media (max-width: 768px) {\n  .features-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .stat-item {\n    margin-bottom: 15px;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}