{"ast":null,"code":"import { createStore } from 'vuex';\nimport api from '../utils/api';\nexport default createStore({\n  state: {\n    sensitiveWords: [],\n    filterRecords: [],\n    statistics: {},\n    loading: false\n  },\n  mutations: {\n    SET_SENSITIVE_WORDS(state, words) {\n      state.sensitiveWords = words;\n    },\n    SET_FILTER_RECORDS(state, records) {\n      state.filterRecords = records;\n    },\n    SET_STATISTICS(state, statistics) {\n      state.statistics = statistics;\n    },\n    SET_LOADING(state, loading) {\n      state.loading = loading;\n    }\n  },\n  actions: {\n    // 获取敏感词列表\n    async fetchSensitiveWords({\n      commit\n    }) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.get('/sensitive-words/enabled');\n        if (response.data.code === 200) {\n          commit('SET_SENSITIVE_WORDS', response.data.data);\n        }\n      } catch (error) {\n        console.error('获取敏感词列表失败:', error);\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // 获取过滤记录\n    async fetchFilterRecords({\n      commit\n    }, {\n      page = 1,\n      size = 10\n    } = {}) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.get('/filter/records', {\n          params: {\n            page,\n            size\n          }\n        });\n        if (response.data.code === 200) {\n          commit('SET_FILTER_RECORDS', response.data.data.list);\n        }\n      } catch (error) {\n        console.error('获取过滤记录失败:', error);\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // 过滤文本\n    async filterText({\n      commit\n    }, text) {\n      commit('SET_LOADING', true);\n      try {\n        const response = await api.post('/filter/text', {\n          text\n        });\n        return response.data;\n      } catch (error) {\n        console.error('文本过滤失败:', error);\n        throw error;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // 检测文本\n    async checkText({\n      commit\n    }, text) {\n      try {\n        const response = await api.post('/filter/check', {\n          text\n        });\n        return response.data;\n      } catch (error) {\n        console.error('文本检测失败:', error);\n        throw error;\n      }\n    }\n  },\n  getters: {\n    sensitiveWordsCount: state => state.sensitiveWords.length,\n    filterRecordsCount: state => state.filterRecords.length,\n    isLoading: state => state.loading\n  }\n});","map":{"version":3,"names":["createStore","api","state","sensitiveWords","filterRecords","statistics","loading","mutations","SET_SENSITIVE_WORDS","words","SET_FILTER_RECORDS","records","SET_STATISTICS","SET_LOADING","actions","fetchSensitiveWords","commit","response","get","data","code","error","console","fetchFilterRecords","page","size","params","list","filterText","text","post","checkText","getters","sensitiveWordsCount","length","filterRecordsCount","isLoading"],"sources":["D:/code/sensitive-word-filter-system/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\r\nimport api from '../utils/api'\r\n\r\nexport default createStore({\r\n  state: {\r\n    sensitiveWords: [],\r\n    filterRecords: [],\r\n    statistics: {},\r\n    loading: false\r\n  },\r\n  \r\n  mutations: {\r\n    SET_SENSITIVE_WORDS(state, words) {\r\n      state.sensitiveWords = words\r\n    },\r\n    SET_FILTER_RECORDS(state, records) {\r\n      state.filterRecords = records\r\n    },\r\n    SET_STATISTICS(state, statistics) {\r\n      state.statistics = statistics\r\n    },\r\n    SET_LOADING(state, loading) {\r\n      state.loading = loading\r\n    }\r\n  },\r\n  \r\n  actions: {\r\n    // 获取敏感词列表\r\n    async fetchSensitiveWords({ commit }) {\r\n      commit('SET_LOADING', true)\r\n      try {\r\n        const response = await api.get('/sensitive-words/enabled')\r\n        if (response.data.code === 200) {\r\n          commit('SET_SENSITIVE_WORDS', response.data.data)\r\n        }\r\n      } catch (error) {\r\n        console.error('获取敏感词列表失败:', error)\r\n      } finally {\r\n        commit('SET_LOADING', false)\r\n      }\r\n    },\r\n    \r\n    // 获取过滤记录\r\n    async fetchFilterRecords({ commit }, { page = 1, size = 10 } = {}) {\r\n      commit('SET_LOADING', true)\r\n      try {\r\n        const response = await api.get('/filter/records', {\r\n          params: { page, size }\r\n        })\r\n        if (response.data.code === 200) {\r\n          commit('SET_FILTER_RECORDS', response.data.data.list)\r\n        }\r\n      } catch (error) {\r\n        console.error('获取过滤记录失败:', error)\r\n      } finally {\r\n        commit('SET_LOADING', false)\r\n      }\r\n    },\r\n    \r\n    // 过滤文本\r\n    async filterText({ commit }, text) {\r\n      commit('SET_LOADING', true)\r\n      try {\r\n        const response = await api.post('/filter/text', { text })\r\n        return response.data\r\n      } catch (error) {\r\n        console.error('文本过滤失败:', error)\r\n        throw error\r\n      } finally {\r\n        commit('SET_LOADING', false)\r\n      }\r\n    },\r\n    \r\n    // 检测文本\r\n    async checkText({ commit }, text) {\r\n      try {\r\n        const response = await api.post('/filter/check', { text })\r\n        return response.data\r\n      } catch (error) {\r\n        console.error('文本检测失败:', error)\r\n        throw error\r\n      }\r\n    }\r\n  },\r\n  \r\n  getters: {\r\n    sensitiveWordsCount: state => state.sensitiveWords.length,\r\n    filterRecordsCount: state => state.filterRecords.length,\r\n    isLoading: state => state.loading\r\n  }\r\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}